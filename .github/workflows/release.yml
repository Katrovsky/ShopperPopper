name: Update APK Releases

on:
  schedule:
    - cron: '0 */4 * * *'  # Запускать каждые четыре часа
  workflow_dispatch:  # Позволяет запускать workflow вручную

jobs:
  update-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests pytz PyGithub

      - name: Download and release APKs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import requests
          import re
          import os
          from github import Github
          from datetime import datetime
          import pytz

          def get_apk_list():
              url = "https://storage.yandexcloud.net/sbermarker-shopper-distribution/"
              response = requests.get(url)
              content = response.text
              apk_list = re.findall(r'<Key>(\d+)/shopper-(\d+\.\d+\.\d+)\.apk</Key>', content)
              last_modified = re.findall(r'<LastModified>(.+?)</LastModified>', content)
              sizes = re.findall(r'<Size>(\d+)</Size>', content)
              return sorted(zip(apk_list, last_modified, sizes), key=lambda x: [int(i) for i in x[0][1].split('.')])

          def download_apk(folder, version):
              url = f"https://storage.yandexcloud.net/sbermarker-shopper-distribution/{folder}/shopper-{version}.apk"
              response = requests.get(url)
              with open("shopper.apk", "wb") as f:
                  f.write(response.content)

          def format_description(version, last_modified, size):
              dt = datetime.strptime(last_modified, "%Y-%m-%dT%H:%M:%S.%fZ")
              dt_utc = dt.replace(tzinfo=pytz.UTC)
              formatted_date = dt_utc.strftime("%d.%m.%y %H:%M:%S")
              size_mb = round(int(size) / (1024 * 1024), 1)
              return f"Версия: {version}\nПоследнее изменение: {formatted_date}\nРазмер: {size_mb} MB"

          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

          existing_releases = [release.tag_name for release in repo.get_releases()]
          apk_list = get_apk_list()

          for (folder, version), last_modified, size in apk_list:
              if version not in existing_releases:
                  print(f"Downloading version {version}")
                  download_apk(folder, version)
                  
                  description = format_description(version, last_modified, size)
                  print(f"Creating release for version {version}")
                  release = repo.create_git_release(
                      tag=version,
                      name=f"Shopper {version}",
                      message=description
                  )
                  release.upload_asset("shopper.apk", name="shopper.apk", content_type="application/vnd.android.package-archive")
                  
                  os.remove("shopper.apk")
              else:
                  print(f"Version {version} already exists, skipping")

        shell: python
